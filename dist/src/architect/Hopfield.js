var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var network = require('../network');
var trainer = require('../trainer');
var layer = require('../layer');
var Hopfield = (function (_super) {
    __extends(Hopfield, _super);
    function Hopfield(size) {
        var inputLayer = new layer.Layer(size);
        var outputLayer = new layer.Layer(size);
        inputLayer.project(outputLayer, layer.Layer.connectionType.ALL_TO_ALL);
        _super.call(this, {
            input: inputLayer,
            hidden: [],
            output: outputLayer
        });
        this.trainer = new trainer.Trainer(this);
    }
    Hopfield.prototype.learn = function (patterns) {
        var set = [];
        for (var p in patterns)
            set.push({
                input: patterns[p],
                output: patterns[p]
            });
        return this.trainer.train(set, {
            iterations: 500000,
            error: .00005,
            rate: 1
        });
    };
    Hopfield.prototype.feed = function (pattern) {
        var output = this.activate(pattern);
        var patterns = [];
        for (var i in output)
            patterns[i] = output[i] > .5 ? 1 : 0;
        return patterns;
    };
    return Hopfield;
})(network.Network);
exports.Hopfield = Hopfield;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcmNoaXRlY3QvSG9wZmllbGQudHMiXSwibmFtZXMiOlsiSG9wZmllbGQiLCJIb3BmaWVsZC5jb25zdHJ1Y3RvciIsIkhvcGZpZWxkLmxlYXJuIiwiSG9wZmllbGQuZmVlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTyxPQUFPLFdBQVksWUFBWSxDQUFDLENBQUM7QUFDeEMsSUFBTyxPQUFPLFdBQVksWUFBWSxDQUFDLENBQUM7QUFDeEMsSUFBTyxLQUFLLFdBQVksVUFBVSxDQUFDLENBQUM7QUFHcEMsSUFBYSxRQUFRO0lBQVNBLFVBQWpCQSxRQUFRQSxVQUF3QkE7SUFHM0NBLFNBSFdBLFFBQVFBLENBR1BBLElBQVlBO1FBQ3RCQyxJQUFJQSxVQUFVQSxHQUFHQSxJQUFJQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUN2Q0EsSUFBSUEsV0FBV0EsR0FBR0EsSUFBSUEsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFFeENBLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBLFdBQVdBLEVBQUVBLEtBQUtBLENBQUNBLEtBQUtBLENBQUNBLGNBQWNBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1FBRXZFQSxrQkFBTUE7WUFDSkEsS0FBS0EsRUFBRUEsVUFBVUE7WUFDakJBLE1BQU1BLEVBQUVBLEVBQUVBO1lBQ1ZBLE1BQU1BLEVBQUVBLFdBQVdBO1NBQ3BCQSxDQUFDQSxDQUFDQTtRQUVIQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUMzQ0EsQ0FBQ0E7SUFFREQsd0JBQUtBLEdBQUxBLFVBQU1BLFFBQVFBO1FBQ1pFLElBQUlBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ2JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLFFBQVFBLENBQUNBO1lBQ3JCQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQTtnQkFDUEEsS0FBS0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xCQSxNQUFNQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTthQUNwQkEsQ0FBQ0EsQ0FBQ0E7UUFFTEEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsRUFBRUE7WUFDN0JBLFVBQVVBLEVBQUVBLE1BQU1BO1lBQ2xCQSxLQUFLQSxFQUFFQSxNQUFNQTtZQUNiQSxJQUFJQSxFQUFFQSxDQUFDQTtTQUNSQSxDQUFDQSxDQUFDQTtJQUNMQSxDQUFDQTtJQUVERix1QkFBSUEsR0FBSkEsVUFBS0EsT0FBT0E7UUFDVkcsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFFcENBLElBQUlBLFFBQVFBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ2xCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxNQUFNQSxDQUFDQTtZQUNuQkEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFFdkNBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBO0lBQ2xCQSxDQUFDQTtJQUNISCxlQUFDQTtBQUFEQSxDQTFDQSxBQTBDQ0EsRUExQzZCLE9BQU8sQ0FBQyxPQUFPLEVBMEM1QztBQTFDWSxnQkFBUSxHQUFSLFFBMENaLENBQUEiLCJmaWxlIjoic3JjL2FyY2hpdGVjdC9Ib3BmaWVsZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuZXR3b3JrICA9IHJlcXVpcmUoJy4uL25ldHdvcmsnKTtcbmltcG9ydCB0cmFpbmVyICA9IHJlcXVpcmUoJy4uL3RyYWluZXInKTtcbmltcG9ydCBsYXllciAgPSByZXF1aXJlKCcuLi9sYXllcicpO1xuaW1wb3J0IG5ldXJvbiA9IHJlcXVpcmUoJy4uL25ldXJvbicpO1xuXG5leHBvcnQgY2xhc3MgSG9wZmllbGQgZXh0ZW5kcyBuZXR3b3JrLk5ldHdvcmsge1xuICB0cmFpbmVyOiB0cmFpbmVyLlRyYWluZXI7XG5cbiAgY29uc3RydWN0b3Ioc2l6ZTogbnVtYmVyKSB7XG4gICAgdmFyIGlucHV0TGF5ZXIgPSBuZXcgbGF5ZXIuTGF5ZXIoc2l6ZSk7XG4gICAgdmFyIG91dHB1dExheWVyID0gbmV3IGxheWVyLkxheWVyKHNpemUpO1xuXG4gICAgaW5wdXRMYXllci5wcm9qZWN0KG91dHB1dExheWVyLCBsYXllci5MYXllci5jb25uZWN0aW9uVHlwZS5BTExfVE9fQUxMKTtcblxuICAgIHN1cGVyKHtcbiAgICAgIGlucHV0OiBpbnB1dExheWVyLFxuICAgICAgaGlkZGVuOiBbXSxcbiAgICAgIG91dHB1dDogb3V0cHV0TGF5ZXJcbiAgICB9KTtcblxuICAgIHRoaXMudHJhaW5lciA9IG5ldyB0cmFpbmVyLlRyYWluZXIodGhpcyk7XG4gIH1cblxuICBsZWFybihwYXR0ZXJucykge1xuICAgIHZhciBzZXQgPSBbXTtcbiAgICBmb3IgKHZhciBwIGluIHBhdHRlcm5zKVxuICAgICAgc2V0LnB1c2goe1xuICAgICAgICBpbnB1dDogcGF0dGVybnNbcF0sXG4gICAgICAgIG91dHB1dDogcGF0dGVybnNbcF1cbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMudHJhaW5lci50cmFpbihzZXQsIHtcbiAgICAgIGl0ZXJhdGlvbnM6IDUwMDAwMCxcbiAgICAgIGVycm9yOiAuMDAwMDUsXG4gICAgICByYXRlOiAxXG4gICAgfSk7XG4gIH1cblxuICBmZWVkKHBhdHRlcm4pIHtcbiAgICB2YXIgb3V0cHV0ID0gdGhpcy5hY3RpdmF0ZShwYXR0ZXJuKTtcblxuICAgIHZhciBwYXR0ZXJucyA9IFtdO1xuICAgIGZvciAodmFyIGkgaW4gb3V0cHV0KVxuICAgICAgcGF0dGVybnNbaV0gPSBvdXRwdXRbaV0gPiAuNSA/IDEgOiAwO1xuXG4gICAgcmV0dXJuIHBhdHRlcm5zO1xuICB9XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9