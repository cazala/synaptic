var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Layer = require('./layer');
var Squash = require('./squash');
var _Utils = require('./utils');
var Utils = _Utils.Utils;
var SoftMaxLayer = (function (_super) {
    __extends(SoftMaxLayer, _super);
    function SoftMaxLayer(size, label) {
        _super.call(this, size, label);
        this.optimizable = false;
        for (var n = 0; n < this.list.length; n++) {
            this.list[n].squash = Squash.IDENTITY;
        }
    }
    SoftMaxLayer.prototype.activate = function (input) {
        if (this.currentActivation.length != this.list.length)
            this.currentActivation = new Float64Array(this.list.length);
        var activationIndex = 0;
        var sum = 0;
        var Amax = null;
        if (typeof input != 'undefined') {
            if (input.length != this.size)
                throw "INPUT size and LAYER size must be the same to activate!";
            Utils.softMax(input);
            for (var id in this.list) {
                this.list[id].readIncommingConnections(input[id]);
                if (Amax === null || this.list[id].activation > Amax)
                    Amax = this.list[id].activation;
            }
        }
        else {
            for (var id in this.list) {
                this.list[id].readIncommingConnections();
                if (Amax === null || this.list[id].activation > Amax)
                    Amax = this.list[id].activation;
            }
        }
        for (var n = 0; n < this.currentActivation.length; n++) {
            sum += (this.list[n].activation = Math.exp(this.list[n].activation - Amax));
        }
        for (var n = 0; n < this.currentActivation.length; n++) {
            // set the activations
            var x = this.list[n].activation / sum;
            this.list[n].activation = this.currentActivation[n] = x;
            // set the derivatives
            //x = this.list[n].activation / (sum - this.list[n].activation);
            this.list[n].derivative = x * (1 - x);
            this.list[n].updateTraces();
        }
        return this.currentActivation;
    };
    SoftMaxLayer.NormalizeConnectionWeights = function (layerConnection) {
        var sum = 0;
        for (var c = 0; c < layerConnection.list.length; c++) {
            sum += (layerConnection.list[c].weight = Math.exp(layerConnection.list[c].weight));
        }
        for (var c = 0; c < layerConnection.list.length; c++) {
            layerConnection.list[c].weight /= sum;
        }
    };
    return SoftMaxLayer;
})(Layer.Layer);
exports.SoftMaxLayer = SoftMaxLayer;

//# sourceMappingURL=data:application/json;base64,